{"version":3,"sources":["components/utils/Sleep.js","components/controls/TextInput.js","components/controls/Button.js","components/TopContainer.js","components/rowoperations/AdditionAndScaleOperations.js","components/functioncontainer/FcontainerTop.js","components/functioncontainer/FcontainerBottom.js","components/functioncontainer/FunctionContainer.js","components/utils/CopyMatrix.js","components/rowelimination/RREFAlgorithm.js","components/BottomContainer.js","components/providers/HistoryProvider.js","components/matrixcontainer/Cell.js","components/matrixcontainer/Matrix.js","components/controls/SwapButton.js","components/rowoperations/SwapOperation.js","components/matrixcontainer/MatrixContainer.js","components/toprow/TopRowItem.js","components/toprow/TopRow.js","components/App.js","index.js"],"names":["sleep","time","Promise","resolve","setTimeout","TextInput","props","useState","backgroundColor","style","setStyle","className","value","val","onChange","e","target","inputTest","then","x","f","number","Number","placeholder","data-testid","testId","Button","onClick","name","TopContainer","topInputTest","isNaN","m","setM","n","setN","makeArray","resetMatrix","convertToNumeric","array","out","forEach","row","push","map","el","parseFloat","parseScalar","scalar","parsedScalar","console","error","rowRangeTest","performRowAddition","R1","R2","R1Scalar","getMatrix","setMatrix","dimRows","length","R1index","R2index","matrix","scaledR1","i","flatMatrix","flatMap","performRowScale","R1Scale","operation","FcontainerTop","setR1Scalar","setR1","setR2","inputRowTest","flagOne","test","FcontainerBottom","setR1Scale","setOperation","zeroFlag","FunctionContainer","rows","copyMatrix","slice","nullFunction","a","lead","rowCount","colCount","r","res","dealWithZeroLead","swapRows","dimAnimation","leadingVal","scaledR","rowI","j","removeNegativeZero","temp","convertMatrix","BottomContainer","undoLast","callConvertMatrix","HistoryContext","createContext","Cell","opacity","transitionProperty","transitionDuration","index","cols","updateVal","matrixCopy","updateState","type","Matrix","gridStyle","gridTemplateColumns","arr","count","dimmedCells","includes","key","renderCells","SwapButton","clicked","doSwap","swapPair","setSwapPair","arrayToMatrix","pair","first","second","MatrixContainer","dimensions","callDoSwap","Array","fill","renderSwapButtons","TopRowItem","heading","TopRow","rowHeads","emptyArray","headingsEnd","makeColHeaders","App","startDimensions","zeroMatrix","historyContext","useContext","setDimensions","Math","floor","random","setDimmedCells","resetHistory","updateMatrixState","newMatrix","addState","startIndex","size","last","undo","ReactDOM","render","children","startState","history","setHistory","Provider","lastState","pop","savedStates","document","getElementById"],"mappings":"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","file":"static/js/main.c567c192.chunk.js","sourcesContent":["const sleep = (time) => {\n    return new Promise((resolve) => setTimeout(resolve, time));\n}\n\nexport default sleep;","import React, { useState } from 'react';\nimport sleep from '../utils/Sleep';\n\nfunction TextInput(props) {\n    const [style, setStyle] = useState({ backgroundColor: 'white' });\n\n    const updateVal = (val) => {\n        // show a red indicator if value is not valid\n        if (props.inputTest(val)) {\n            setStyle({ backgroundColor: '#ec3643' });\n            sleep(500).then(x => setStyle({ backgroundColor: 'white' }));\n            props.f('');\n        } else {\n            if (props.number) {\n                props.f(Number(val));\n            } else {\n                props.f(val);\n            }\n        }\n    }\n\n    return (\n        <input className={props.className} \n        value={ props.val }\n        style={ style }\n        onChange={ (e) => updateVal(e.target.value) } \n        placeholder={props.placeholder}\n        data-testid={props.testId} />\n    );\n}\n\nexport default TextInput;","import React from 'react';\n\nfunction Button(props) {\n    return ( \n    <button className={props.className} onClick={(e) => props.f()} \n            data-testid={props.testId} >\n        {props.name}\n    </button> );\n}\n\nexport default Button;","import React from 'react';\nimport TextInput from './controls/TextInput';\nimport Button from './controls/Button';\n\nfunction TopContainer(props) {\n  // test input for dimensions. m,n must be between 1 and 10.\n  const topInputTest = (val) => {\n    return (isNaN(val) || val < 1 || val > 10);\n  }\n\n  return (\n    <div className='topContainer'>\n      <TextInput className='topInput' val={props.m} inputTest={topInputTest}\n        f={props.setM} placeholder={'m'} number={true} testId={\"mInput\"} />\n      <div className='topDiv'>X</div>\n      <TextInput className='topInput' val={props.n} inputTest={topInputTest}\n        f={props.setN} placeholder={'n'} number={true} testId={\"nInput\"} />\n      <Button name='Make matrix' f={props.makeArray} className={'topButton'} />\n      <Button name='Reset' f={props.resetMatrix} className={'topButton'} />\n    </div>\n  );\n}\n\nexport default TopContainer;","/**\n * Contains logic for the row addition and row scale operations\n */\n\n// covert all cell values to numbers\nconst convertToNumeric = (array) => {\n    const out = [];\n\n    // convert to base 10 decimal\n    array.forEach(row => out.push(row.map(el => {\n        // convert single dots and dashes (allowed by regex) to 0\n        el === '.' || el === '-' ? el = 0 : el = el;\n        return parseFloat(el, 10);\n    }\n    )));\n    return out;\n}\n\n// read a scalar value into a variable or \n// return false if not a number\nconst parseScalar = (scalar) => {\n    // attempt to parse the scalar value \n    let parsedScalar = parseFloat(scalar);\n    // invalid scalar provided\n    if (isNaN(parsedScalar)) {\n        console.error(\"Invalid scalar\")\n        return false;\n    }\n    return parsedScalar;\n}\n\n// test row id which must be >= 1 and <= m\nconst rowRangeTest = (row, m) => {\n    return (isNaN(row) || row < 1 || row > m);\n}\n\n// adds a scaled R1 to R2 and updates matrix state\nconst performRowAddition = (R1, R2, R1Scalar, getMatrix, setMatrix, dimRows) => {\n    let m = getMatrix().length;\n\n    // invalid rows selected\n    if (rowRangeTest(R1, m) || rowRangeTest(R2, m)) {\n        console.error(\"Both rows must be selected\")\n        return;\n    }\n\n    let R1index = R1 - 1; // rows are zero-indexed\n    let R2index = R2 - 1;\n\n    // attempt to parse the scalar value \n    let parsedScalar = parseScalar(R1Scalar);\n    if (!parsedScalar) {\n        // return if an invlid scalar was provided\n        return;\n    }\n\n    // get copy of matrix from the app class\n    let matrix = getMatrix();\n    matrix = convertToNumeric(matrix);\n\n    // scale R1 by the required amount\n    const scaledR1 = matrix[R1index].map(el => el *= parsedScalar)\n    // add scaled R1 to R2\n    for (let i = 0; i < matrix[R2index].length; i++) {\n        matrix[R2index][i] += scaledR1[i];\n    }\n\n    // flatten result and update parent class \n    const flatMatrix = matrix.flatMap(el => el);\n    dimRows([R2index]);\n    setMatrix(flatMatrix);\n}\n\n\n// multiplies/divides R by some value\nconst performRowScale = (R1, R1Scale, operation, getMatrix, setMatrix, dimRows) => {\n    let R1index = R1 - 1; // rows are zero-indexed in the code\n    if (R1index < 0) {\n        return;\n    }\n\n    // attempt to parse the scalar value \n    let parsedScalar = parseScalar(R1Scale);\n    if (!parsedScalar) {\n        // return if an invlid scalar was provided\n        return;\n    }\n\n    // get copy of matrix from the app class\n    let matrix = getMatrix();\n    matrix = convertToNumeric(matrix);\n\n    // scale R1 by the required amount\n    const scaledR1 = matrix[R1index].map(el => {\n        if (operation === '🞄') {\n            return el *= parsedScalar;\n        } else {\n            return el /= parsedScalar;\n        }\n    });\n\n    matrix[R1index] = scaledR1;\n\n    // flatten result and update parent class \n    const flatMatrix = matrix.flatMap(el => el);\n\n    dimRows([R1index]);\n    setMatrix(flatMatrix);\n}\n\nexport {performRowAddition, performRowScale};","import React, { useState } from 'react';\nimport TextInput from '../controls/TextInput';\nimport Button from '../controls/Button';\nimport { performRowAddition } from '../rowoperations/AdditionAndScaleOperations';\n\n/**\n * Stores and renders controls for row addition operation\n */\nfunction FcontainerTop( { rowRangeTest, getMatrix, setMatrix, dimRows }) {\n    const [R1Scalar, setR1Scalar] = useState(1); // amount to scale row by\n    const [R1, setR1] = useState(''); // first row used in operation\n    const [R2, setR2] = useState(''); // second row used in operation\n\n    // test scalar values, which may be fractional or negative\n    const inputDecimalTest = (val) => {\n        // scalars should not be made up for more than 7 characters\n        const maxLength = 7;\n\n        // 0 or 1 dash followed by optional digits and 0 or 1 dot\n        // then optional digits \n        const RE = /^-{0,1}\\d*\\.{0,1}\\d*$/;\n        return !RE.test(val) || val.length > maxLength;\n    }\n\n    const inputRowTest = (row) => {\n        // selected row must be less than or equal to N\n        const flagOne = rowRangeTest(row);\n\n        row = Number(row);\n        // cannot perform a row action on itself\n        const flagTwo = (row === R1) || (row === R2);\n        return flagOne || flagTwo;\n    }\n\n    // call the perform row addition function in the row operations module\n    const callperformRowAddition = () => {\n        performRowAddition(R1, R2, R1Scalar, getMatrix, setMatrix, dimRows)\n    }\n\n    return (\n        <div className='fContainer'>\n            <TextInput className='fInput' f={setR1Scalar} val={R1Scalar}\n                inputTest={inputDecimalTest} number={false}\n                testId={'scalarValueTop'} />\n            <div className='fDiv'> 🞄 Row </div>\n            <TextInput className='fInput' f={setR1} val={R1}\n                inputTest={inputRowTest} number={true}\n                testId={'R1ValueTop'} placeholder={'Rᵢ'} />\n                \n            <div className='fDiv'> &#43; Row </div>\n            <TextInput className='fInput' f={setR2} val={R2}\n                inputTest={inputRowTest} number={true}\n                testId={'R2ValueTop'} placeholder={'Rⱼ'} />\n            <Button className='fButton'\n                name={`${R1Scalar} 🞄 R${R1} + R${R2} → R${R2}`} f={callperformRowAddition}\n                testId={\"rowAdditionButton\"} />\n        </div>\n    )\n}\n\nexport default FcontainerTop;","import React, { useState } from 'react';\nimport TextInput from '../controls/TextInput';\nimport Button from '../controls/Button';\nimport { performRowScale } from '../rowoperations/AdditionAndScaleOperations';\n\n/**\n *  renders control for row scale operation\n */\nfunction FcontainerBottom( { getMatrix, setMatrix, rowRangeTest, dimRows} ) {\n    const [R1Scale, setR1Scale] = useState(1); // amount to scale row by\n    const [R1, setR1] = useState(''); // row used in operation\n    const [operation, setOperation] = useState('🞄') // multiply or divide\n\n    // switch between division and multiplication\n    const switchOperation = () => {\n        const op = operation === '🞄' ? '÷' : '🞄';\n        setOperation(op);\n    }\n\n    // test scalar values, which may be fractional or negative\n    const inputDecimalTest = (val) => {\n        // scalars should not be made up for more than 7 characters\n        const maxLength = 7;\n\n        // scaling by 0 is not allowed\n        const zeroFlag = val === '0';\n\n        // 0 or 1 dash followed by optional digits and 0 or 1 dot\n        // then optional digits \n        const RE = /^-{0,1}\\d*\\.{0,1}\\d*$/;\n        return !RE.test(val) || val.length > maxLength || zeroFlag;\n    }\n\n    // call perform row scale function from row operations module\n    const callperformRowScale = () => {\n        performRowScale(R1, R1Scale, operation, getMatrix, setMatrix, dimRows);\n    }\n\n    return (\n        <div className=\"fContainer\">\n            <div className=\"fDivLong\"> </div>\n            <div className=\"fDiv\"> Row </div>\n            <TextInput className='fInput' f={setR1} val={R1}\n                inputTest={rowRangeTest} number={true}\n                testId={'R1ValueBottom'}\n                placeholder={'Rᵢ'} />\n            <div className=\"opButtonContainer\">\n                <Button className='opButton'\n                    name={operation}\n                    testId={\"setOperationButton\"}\n                    f={switchOperation} />\n            </div>\n            <TextInput className='fInput' f={setR1Scale} val={R1Scale}\n                inputTest={inputDecimalTest} number={false}\n                testId={'scalarValueBottom'} />\n            <Button className='fButton'\n                name={`R${R1} ${operation} ${R1Scale} → R${R1}`}\n                testId={\"rowScaleButton\"}\n                f={callperformRowScale} />\n        </div>\n    );\n}\n\nexport default FcontainerBottom;","import React from 'react';\nimport FcontainerTop from './FcontainerTop';\nimport FcontainerBottom from './FcontainerBottom';\n\n/**\n * renders both child components of the bottom\n * container \n */\nfunction FunctionContainer({ rows, getMatrix, setMatrix, dimRows }) {\n\n  // test row id which must be >= 1 and <= m\n  const rowRangeTest = (row) => {\n    return (isNaN(row) || row < 1 || row > rows);\n  }\n\n  return (\n    <div className='functionContainer'>\n      <FcontainerTop rows={rows}\n        dimRows={dimRows}\n        getMatrix={getMatrix}\n        setMatrix={setMatrix}\n        rowRangeTest={rowRangeTest} />\n      <FcontainerBottom rows={rows}\n        dimRows={dimRows}\n        getMatrix={getMatrix}\n        setMatrix={setMatrix}\n        rowRangeTest={rowRangeTest} />\n    </div>\n  );\n}\n\nexport default FunctionContainer;","// copy a matrix and its items\nfunction copyMatrix(matrix) {\n    const copyMatrix = []\n    matrix.forEach(el => {\n        copyMatrix.push(el.slice(0));        \n    });\n\n    return copyMatrix;\n}\n\nexport default copyMatrix;\n","import copyMatrix from '../utils/CopyMatrix';\nimport sleep from '../utils/Sleep';\n\n/**\n * Algorithm to convert input matrix to reduced row echelon form. Based on\n * pseudocode from https://rosettacode.org/wiki/Reduced_row_echelon_form\n */\n\nconst nullFunction = () => {return}\nasync function convertMatrix(matrix, dimRows, setMatrix = nullFunction) {\n    matrix = copyMatrix(matrix); // create copy\n\n    let lead = 0; // pivot entry\n\n    const rowCount = matrix.length;\n    const colCount = matrix[0].length;\n\n    for (let r = 0; r < rowCount; r++) {\n        // lead exceeds bounds of nested array\n        if (lead >= colCount) {\n            return matrix;\n        }\n        let i = r;\n\n        // when leading cell in this row is a zero\n        if (matrix[i][lead] === 0) {\n            let res = dealWithZeroLead(matrix, i, r, lead, rowCount, colCount);\n            // exceeded bounds of matrix\n            if (res[0] === -1) {\n                return matrix;\n            } else {\n                [i, lead] = [...res];\n            }\n        }\n        matrix = swapRows(i, r, matrix);\n\n        await dimAnimation(dimRows, [i, r], 500);\n        setMatrix(matrix.flatMap( el => el));\n\n        let leadingVal = matrix[r][lead];\n\n        if (leadingVal !== 0) {\n            // divide row r by this value\n            matrix[r] = matrix[r].map(el => el / leadingVal);\n\n            await dimAnimation(dimRows, [r], 500);\n            setMatrix(matrix.flatMap( el => el));\n        }\n\n        for (let i = 0; i < rowCount; i++) {\n            leadingVal = matrix[i][lead];\n            if (i !== r) {\n                let scaledR = matrix[r].map(el => el * leadingVal);\n\n                let rowI = matrix[i];\n                // subtract the scaled row r from row i \n                for (let j = 0; j < colCount; j++) {\n                    rowI[j] -= scaledR[j];\n\n                    setMatrix(matrix.flatMap( el => el));\n                }\n                \n     \n            }\n            await dimAnimation(dimRows, [i], 250);\n        }\n        lead++;\n    }\n    return removeNegativeZero(matrix);\n}\n\n// performs dimming animations\nasync function dimAnimation(dimRows, rows, time) {\n    dimRows(rows);\n    await sleep(time);\n}\n\n\nfunction removeNegativeZero(matrix) {\n    let out = []\n\n    matrix.forEach(row => out\n        .push(row\n            .map(el => el === -0? 0: el)))\n\n    return out;\n}\n\nfunction dealWithZeroLead(matrix, i, r, lead, rowCount, colCount) {\n    while (matrix[i][lead] === 0) {\n        i++;\n\n        // i has exceeded bounds of matrix\n        if (i === rowCount) {\n            i = r;\n            lead++;\n\n            // leading col has exceeded bounds of\n            // nested matrix \n            if (lead === colCount) {\n                // signals termination condition\n                return [-1, -1];\n            }\n        }\n    }\n    return [i, lead];\n}\n\nfunction swapRows(i, r, matrix) {\n    matrix = copyMatrix(matrix); // create copy\n\n    let temp = matrix[i];\n    matrix[i] = matrix[r];\n    matrix[r] = temp;\n\n    return matrix;\n}\n\nexport default convertMatrix;","import React from 'react'\nimport FunctionContainer from './functioncontainer/FunctionContainer';\nimport Button from './controls/Button';\nimport convertMatrix from './rowelimination/RREFAlgorithm';\n\nfunction BottomContainer( { rows, getMatrix, setMatrix, undoLast, dimRows}) {\n    // convert the matrix to reduced row echelon form\n    const callConvertMatrix = async () => {\n      // get the converted matrix, which must be flattened\n      convertMatrix(getMatrix(), dimRows, setMatrix).then(res => \n        {\n          setMatrix(res.flatMap(el => el));\n        });\n    }\n\n    return (\n        <div className='bottomContainer'>\n        <FunctionContainer rows={rows} dimRows={dimRows}\n        getMatrix={getMatrix}\n        setMatrix={setMatrix} />  \n        <Button name={'↺'} className={'undoButton'} f={undoLast}\n                testId={\"undoButton\"} />\n        <Button name={'Convert to row canonical form'} className={'echeleonButton'}\n                f={callConvertMatrix}/>\n      </div>\n    );\n}\n\nexport default BottomContainer;","import React, { useState, createContext } from 'react';\n\n/**\n *  Contains the history of states stored as a stack\n */\nconst HistoryContext = createContext();\n\nfunction HistoryProvider({ children }) {\n    const startDimensions = { n: 4, m: 5 };\n    const zeroMatrix = new Array(startDimensions.m * startDimensions.n).fill(0);\n    const startState = { matrix: zeroMatrix, dimensions: startDimensions }\n\n    const [history, setHistory] = useState([startState]);\n\n    // return the last saved state\n    const undo = () => {\n\n        if (history.length === 1) {\n            return false;\n        }\n\n        const lastState = history.slice(0).pop();\n        setHistory(history.slice(0, history.length-1));\n \n        return lastState;\n    }\n\n    // add the current state to the history\n    const addState = (matrix) => {\n        const savedStates = history.slice(0);\n        savedStates.push(matrix);\n        setHistory(savedStates);\n    }\n\n    // set as empty history array\n    const resetHistory = (zeroMatrix) => {\n        setHistory([zeroMatrix]);\n    }\n\n    return (\n        <HistoryContext.Provider value={{ undo, addState, resetHistory }}>\n            {children}\n        </ HistoryContext.Provider>\n    );\n}\n\nexport { HistoryProvider, HistoryContext };\n\n","import React from 'react';\n\n/**\n * A cell in the matrix. Is used to input and display values\n */\nfunction Cell(props) {\n    const getColour = (i) => {\n        // the index of the item mod |columns| is |columns|-1 \n        const cellColour = (i % props.cols) === props.cols - 1 ? '#cecece' : 'white';\n        \n        return cellColour;\n    }\n\n    const style = { opacity: props.opacity, \n                    transitionProperty: \"opacity\",\n                    transitionDuration: \"0.2s\",\n                    backgroundColor: getColour(props.index)};\n\n    //update the matrix state\n    const updateState = (val) => {\n        let matrixCopy = props.matrix.slice(0);\n        matrixCopy[props.index] = val;\n        props.setMatrix(matrixCopy);\n    }\n\n    const updateVal = (val) => {\n        // 0 or 1 dash followed by optional digits and 0 or 1 dot\n        // then optional digits \n        let RE = /^-{0,1}\\d*\\.{0,1}\\d*$/;\n        if (!RE.test(val)) {\n            // return on invalid input \n            return;\n        } else {\n            updateState(val);\n        }\n    }\n\n    return (\n        <div className='cell' >\n            <input type='text' className='numInput'\n                value={props.matrix[props.index]}\n                style={style}\n                onChange={(e) => updateVal(e.target.value)}\n                data-testid={props.index} />\n        </div>\n    );\n}\n\nexport default Cell;","import React from 'react';\nimport Cell from './Cell';\n\n/**\n * The matrix of cells \n */\nfunction Matrix(props) {\n    const gridStyle = { gridTemplateColumns: `repeat(${props.cols}, minmax(auto, 1fr))` };\n\n    // render each cell of the matrix using dimensions \n    // passed in props\n    const renderCells = (arr) => {\n        let count = 0;\n        return (\n            arr.map(el => {\n                let i = count;\n                count++;\n\n                let opacity = props.dimmedCells.includes(i)? 0: 1;\n\n                return <Cell index={i} key={i} matrix={props.matrix} \n                        setMatrix={props.setMatrix} cols={props.cols}\n                        opacity={opacity} />\n            })\n        );\n    };\n\n    return (\n        <div className=\"matrix\" style={gridStyle}>\n            {renderCells(props.matrix)}\n        </div>\n    );\n}\n\nexport default Matrix;","import React from 'react';\n\nfunction SwapButton(props) {\n    let style = {};\n    if (props.clicked) {\n        style = {backgroundColor: '#3CBC8D'}\n    }\n\n    return ( \n    <button className=\"swapButton\" onClick={(e) => {props.f(props.i)}} \n        style={style}>\n        {props.name}\n    </button>\n    );\n}\n\nexport default SwapButton;","// swap two rows in the matrix\nconst doSwap = (i, swapPair, setSwapPair, arrayToMatrix, setMatrix, dimRows) => {\n    let pair = swapPair;\n    pair.push(i);\n    setSwapPair(pair.slice(0));\n\n    // if two rows have been selected to swap\n    if (swapPair.length === 2) {\n        // indexes of rows being swapped\n        let first = swapPair[0];\n        let second = swapPair[1];\n\n        dimRows([first,second])\n        \n        let arr = arrayToMatrix();\n\n        // the row being overwritten\n        let temp = arr[first];\n        arr[first] = arr[second];\n        arr[second] = temp;\n\n        let flattened = arr.flatMap(el => el);\n        setMatrix(flattened);\n        setSwapPair([])\n    }\n}\n\nexport default doSwap;","import React from 'react';\nimport Matrix from './Matrix';\nimport SwapButton from '../controls/SwapButton';\nimport doSwap from '../rowoperations/SwapOperation';\n\n/**\n * Renders the matrix and side buttons\n */\nfunction MatrixContainer({ dimensions, swapPair, setSwapPair, matrix, setMatrix,\n    arrayToMatrix, dimmedCells, dimRows }) {\n    const rows = dimensions.m;\n    const cols = dimensions.n;\n\n    // call the swap row operation to swap two selected\n    // rows\n    const callDoSwap = (i) => {\n        doSwap(i, swapPair, setSwapPair,\n            arrayToMatrix, setMatrix, dimRows);\n    }\n\n    const renderSwapButtons = () => {\n        let count = 0;\n        // there should be as many buttons as rows\n        const arr = new Array(dimensions.m).fill(0);\n\n        return arr.map(el => {\n            let i = count;\n            count++;\n\n            let clicked = false;\n            // if this button has been clicked\n            if (i === swapPair[0] || i === swapPair[1]) {\n                clicked = true;\n            }\n\n            return <SwapButton i={i} key={count} name={`⟺ Row ${count}`}\n                f={callDoSwap} clicked={clicked} />\n        })\n    }\n\n    return (\n        <div className='matrixContainer'>\n            <div className='swapButtons'>\n                {renderSwapButtons()}\n            </div>\n            <Matrix cols={cols}\n                matrix={matrix}\n                setMatrix={setMatrix}\n                dimmedCells={dimmedCells} />\n        </div>\n    );\n}\n\nexport default MatrixContainer;","import React from 'react';\n\nfunction TopRowItem(props) {\n    return (\n        <div className='topRowItem'>{props.heading}</div>\n    );\n}\n\nexport default TopRowItem;","import React from 'react';\nimport TopRowItem from './TopRowItem';\n\nfunction TopRow(props) {\n    const rowHeads = ['x₁', 'x₂', 'x₃', 'x₄', 'x₅', 'x₆', 'x₇', 'x₈', 'x₉', 'd'];\n\n    const makeColHeaders = () => {\n        const emptyArray = new Array(props.cols).fill(0);\n        let i = 0;\n        let headingsEnd = rowHeads.length -1 ;\n\n        return (\n            emptyArray.map(el => {\n                // if this is the final column heading it is a constant and should use 'd'\n                let heading = i === props.cols-1? rowHeads[headingsEnd]: rowHeads[i];\n                i++;\n            \n                return (\n                    <TopRowItem heading={heading} key={i}/>\n                );\n            }\n            )\n        );\n    }\n\n    return (\n        <div className='topRow'>{makeColHeaders()}</div>\n    );\n}\n\nexport default TopRow;","import React, { useState, useContext } from 'react';\nimport TopContainer from './TopContainer';\nimport BottomContainer from './BottomContainer';\nimport { HistoryContext } from './providers/HistoryProvider';\nimport MatrixContainer from './matrixcontainer/MatrixContainer';\nimport TopRow from './toprow/TopRow';\nimport sleep from './utils/Sleep';\n\nfunction App() {\n  const startDimensions = { m: 4, n: 5 };\n  const zeroMatrix = new Array(startDimensions.m * startDimensions.n).fill(0);\n\n  // create an array with random values as start state\n  const makeRandomArray = () => {\n    const min = -10;\n    const max = 10;\n\n    const size = startDimensions.m * startDimensions.n;\n    const arr = new Array(size).fill(0);\n\n    // map each 0 element to a random member in range min to max\n    return arr.map(el => {\n      return Math.floor(Math.random() * (max - min + 1) + min);\n    });\n  }\n\n  const historyContext = useContext(HistoryContext); // stores history of past states\n\n  const [dimensions, setDimensions] = useState(startDimensions); // dimension of array (mXn)\n  const [m, setM] = useState('');\n  const [n, setN] = useState('');\n  const [matrix, setMatrix] = useState(makeRandomArray()); // the matrix represented as a 1D array\n  const [swapPair, setSwapPair] = useState([]); // two rows to be swapped\n  const [dimmedCells, setDimmedCells] = useState([]); // cells dimmed during transition animations\n\n  // create an array of the required dimensions\n  const makeArray = () => {\n    resetMatrix()\n    if (m === '' || n === '') {\n      return;\n    }\n\n    const size = m * n;\n    setDimensions({ m, n });\n\n    const matrix = new Array(size).fill(0);\n    historyContext.resetHistory({ matrix: zeroMatrix, dimensions: startDimensions });\n    updateMatrixState(matrix);\n  }\n\n  // reset matrix to original dimensions and values\n  const resetMatrix = () => {\n    setN('');\n    setM('');\n    setDimensions(startDimensions);\n    setMatrix(zeroMatrix);\n    setSwapPair([]);\n    historyContext.resetHistory({ matrix: zeroMatrix, dimensions: startDimensions });\n  }\n\n  // gets previous state from history\n  // and update current state to reflect it\n  const undoLast = () => {\n    const last = historyContext.undo();\n\n    // history is empty\n    if (!last) {\n      resetMatrix();\n    } else {\n      setMatrix(last.matrix);\n      setDimensions(last.dimensions);\n    }\n  }\n\n  // update matrix state and save\n  // to history\n  const updateMatrixState = (newMatrix) => {\n    historyContext.addState({ matrix, dimensions });\n    setMatrix(newMatrix);\n  }\n\n  // converts the matrix, which is currently in 1D array form, to\n  // 2D array\n  const arrayToMatrix = () => {\n    const out = [];\n    const cols = dimensions.n;\n    // iterate in chunks of the column size\n    for (let i = 0; i < matrix.length; i = i + cols) {\n      out.push(matrix.slice(i, i + cols));\n    }\n    return out;\n  }\n  \n  // triggers transition animation to signify row operation. Takes an array of \n  // row indices as its sole argument\n  const dimRows = async (rows) => {\n    const cols = dimensions.n;\n    const out = [];\n\n    rows.forEach(row => {\n      let startIndex = row * cols;\n      out.push(startIndex);\n  \n      // add index of ther cells in this row\n      for (let i = startIndex + 1; i < startIndex + cols; i++) {\n          out.push(i);\n      }\n    });\n\n    // add these to array of dimmed cells\n    setDimmedCells(out);\n    await sleep(250);\n    setDimmedCells([]);\n  }\n\n  return (\n    <div className='mainContainer'>\n      <TopContainer setM={setM} setN={setN} makeArray={makeArray}\n        m={m} n={n} resetMatrix={resetMatrix} />\n      <TopRow cols={dimensions.n} />\n      <MatrixContainer dimensions={dimensions} swapPair={swapPair}\n        setSwapPair={setSwapPair} arrayToMatrix={arrayToMatrix}\n        matrix={matrix} setMatrix={updateMatrixState}\n        dimmedCells={dimmedCells}\n        dimRows={dimRows} />\n      <BottomContainer rows={dimensions.m}\n        getMatrix={arrayToMatrix}\n        setMatrix={updateMatrixState}\n        undoLast={undoLast}\n        setDimmedCells={setDimmedCells} \n        dimRows={dimRows} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport { HistoryProvider } from './components/providers/HistoryProvider';\n \nReactDOM.render(\n    <HistoryProvider>\n        <App />\n    </HistoryProvider>,\n    document.getElementById('root'));"],"sourceRoot":""}