{"version":3,"sources":["components/utils/Sleep.js","components/controls/TextInput.js","components/controls/Button.js","components/TopContainer.js","components/rowoperations/AdditionAndScaleOperations.js","components/functioncontainer/FcontainerTop.js","components/functioncontainer/FcontainerBottom.js","components/functioncontainer/FunctionContainer.js","components/utils/CopyMatrix.js","components/rowelimination/RREFAlgorithm.js","components/BottomContainer.js","components/providers/HistoryProvider.js","components/matrixcontainer/Cell.js","components/matrixcontainer/Matrix.js","components/controls/SwapButton.js","components/rowoperations/SwapOperation.js","components/matrixcontainer/MatrixContainer.js","components/toprow/TopRowItem.js","components/toprow/TopRow.js","components/App.js","index.js"],"names":["sleep","time","Promise","resolve","setTimeout","TextInput","className","val","inputTest","number","f","placeholder","testId","useState","backgroundColor","style","setStyle","value","onChange","e","then","x","Number","updateVal","target","data-testid","Button","name","onClick","TopContainer","m","setM","n","setN","makeArray","resetMatrix","topInputTest","isNaN","convertToNumeric","array","out","forEach","row","push","map","el","parseFloat","parseScalar","scalar","parsedScalar","console","error","rowRangeTest","performRowAddition","R1","R2","R1Scalar","getMatrix","setMatrix","dimRows","length","R1index","R2index","matrix","scaledR1","i","flatMatrix","flatMap","performRowScale","R1Scale","operation","FcontainerTop","setR1Scalar","setR1","setR2","inputRowTest","flagOne","test","multiplySymbol","divideSymbol","FcontainerBottom","setR1Scale","setOperation","zeroFlag","FunctionContainer","rows","copyMatrix","slice","nullFunction","a","lead","rowCount","colCount","r","res","dealWithZeroLead","swapRows","dimAnimation","leadingVal","scaledR","rowI","j","removeNegativeZero","Object","is","temp","convertMatrix","BottomContainer","undoLast","callConvertMatrix","HistoryContext","createContext","Cell","cols","index","opacity","transitionProperty","transitionDuration","matrixCopy","updateState","type","Matrix","dimmedCells","gridStyle","gridTemplateColumns","includes","key","SwapButton","clicked","doSwap","swapPair","setSwapPair","arrayToMatrix","pair","first","second","arr","MatrixContainer","dimensions","callDoSwap","Array","fill","TopRowItem","heading","TopRow","rowHeads","emptyArray","headingsEnd","makeColHeaders","App","startDimensions","zeroMatrix","historyContext","useContext","setDimensions","Math","floor","random","setDimmedCells","resetHistory","updateMatrixState","newMatrix","roundToFour","num","round","mapToNumberOrZero","EPSILON","addState","startIndex","size","last","undo","ReactDOM","render","children","startState","history","setHistory","Provider","lastState","pop","savedStates","document","getElementById"],"mappings":"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","file":"static/js/main.d7b60d0e.chunk.js","sourcesContent":["const sleep = (time) => {\n    return new Promise((resolve) => setTimeout(resolve, time));\n};\n\nexport default sleep;","import React, { useState } from 'react';\nimport sleep from '../utils/Sleep';\n\nfunction TextInput({ className, val, inputTest, number, f, placeholder, testId }) {\n    const [style, setStyle] = useState({ backgroundColor: 'white' });\n\n    const updateVal = (val) => {\n        // show a red indicator if value fails input test\n        if (inputTest(val)) {\n            setStyle({ backgroundColor: '#ec3643' });\n            sleep(500).then(x => setStyle({ backgroundColor: 'white' }));\n            f('');\n        } else {\n            if (number) {\n                f(Number(val));\n            } else {\n                f(val);\n            }\n        }\n    };\n\n    return (\n        <input className={className}\n            value={val}\n            style={style}\n            onChange={(e) => updateVal(e.target.value)}\n            placeholder={placeholder}\n            data-testid={testId} />\n    );\n}\n\nexport default TextInput;","import React from 'react';\n\nfunction Button({ className, name, testId, f }) {\n    return (\n        <button className={className} onClick={(e) => f()}\n            data-testid={testId} >\n            {name}\n        </button>);\n}\n\nexport default Button;","import React from 'react';\nimport TextInput from './controls/TextInput';\nimport Button from './controls/Button';\n\nfunction TopContainer({ m, setM, n, setN, makeArray, resetMatrix }) {\n  // test input for dimensions. m,n must be between 1 and 10.\n  const topInputTest = (val) => {\n    return (isNaN(val) || val < 1 || val > 10);\n  };\n\n  return (\n    <div className='topContainer'>\n      <TextInput className='topInput' val={m} inputTest={topInputTest}\n        f={setM} placeholder={'m'} number={true} testId={\"mInput\"} />\n      <div className='topDiv'>X</div>\n      <TextInput className='topInput' val={n} inputTest={topInputTest}\n        f={setN} placeholder={'n'} number={true} testId={\"nInput\"} />\n      <Button name='Make matrix' f={makeArray} className={'topButton'} />\n      <Button name='Reset' f={resetMatrix} className={'topButton'} />\n    </div>\n  );\n}\n\nexport default TopContainer;","/**\n * Contains logic for the row addition and row scale operations\n */\n\n// covert all cell values to numbers\nconst convertToNumeric = (array) => {\n    const out = [];\n\n    // convert to base 10 decimal\n    array.forEach(row => out.push(row.map(el => {\n        // convert single dots and dashes (allowed by regex) to 0\n        el === '.' || el === '-' ? el = 0 : el = el;\n        return parseFloat(el, 10);\n    }\n    )));\n    return out;\n};\n\n// read a scalar value into a variable or \n// return false if not a number\nconst parseScalar = (scalar) => {\n    // attempt to parse the scalar value \n    let parsedScalar = parseFloat(scalar);\n    // invalid scalar provided\n    if (isNaN(parsedScalar)) {\n        console.error('Invalid scalar');\n        return false;\n    }\n    return parsedScalar;\n};\n\n// test row id which must be >= 1 and <= m\nconst rowRangeTest = (row, m) => {\n    return (isNaN(row) || row < 1 || row > m);\n};\n\n// adds a scaled R1 to R2 and updates matrix state\nconst performRowAddition = (R1, R2, R1Scalar, getMatrix, setMatrix, dimRows) => {\n    let m = getMatrix().length;\n\n    // invalid rows selected\n    if (rowRangeTest(R1, m) || rowRangeTest(R2, m)) {\n        console.error('Both rows must be selected');\n        return;\n    }\n\n    let R1index = R1 - 1; // rows are zero-indexed\n    let R2index = R2 - 1;\n\n    // attempt to parse the scalar value \n    let parsedScalar = parseScalar(R1Scalar);\n    if (!parsedScalar) {\n        // return if an invlid scalar was provided\n        return;\n    }\n\n    // get copy of matrix from the app class\n    let matrix = getMatrix();\n    matrix = convertToNumeric(matrix);\n\n    // scale R1 by the required amount\n    const scaledR1 = matrix[R1index].map(el => el *= parsedScalar);\n    // add scaled R1 to R2\n    for (let i = 0; i < matrix[R2index].length; i++) {\n        matrix[R2index][i] += scaledR1[i];\n    }\n\n    // flatten result and update parent class \n    const flatMatrix = matrix.flatMap(el => el);\n    dimRows([R2index]);\n    setMatrix(flatMatrix);\n};\n\n// multiplies/divides R by some value\nconst performRowScale = (R1, R1Scale, operation, getMatrix, setMatrix, dimRows) => {\n    const multiplySymbol = '\\u00B7';\n\n    let R1index = R1 - 1; // rows are zero-indexed in the code\n    if (R1index < 0) {\n        return;\n    }\n\n    // attempt to parse the scalar value \n    let parsedScalar = parseScalar(R1Scale);\n    if (!parsedScalar) {\n        // return if an invlid scalar was provided\n        return;\n    }\n\n    // get copy of matrix from the app class\n    let matrix = getMatrix();\n    matrix = convertToNumeric(matrix);\n\n    // scale R1 by the required amount\n    const scaledR1 = matrix[R1index].map(el => {\n        if (operation === multiplySymbol) {\n            return el *= parsedScalar;\n        } else {\n            return el /= parsedScalar;\n        }\n    });\n\n    matrix[R1index] = scaledR1;\n\n    // flatten result and update parent class \n    const flatMatrix = matrix.flatMap(el => el);\n\n    dimRows([R1index]);\n    setMatrix(flatMatrix);\n};\n\nexport { performRowAddition, performRowScale };","import React, { useState } from 'react';\nimport TextInput from '../controls/TextInput';\nimport Button from '../controls/Button';\nimport { performRowAddition } from '../rowoperations/AdditionAndScaleOperations';\n\n/**\n * Stores and renders controls for row addition operation\n */\nfunction FcontainerTop( { rowRangeTest, getMatrix, setMatrix, dimRows }) {\n    const bigX = '\\u2715'\n    const [R1Scalar, setR1Scalar] = useState(1); // amount to scale row by\n    const [R1, setR1] = useState(''); // first row used in operation\n    const [R2, setR2] = useState(''); // second row used in operation\n\n    // test scalar values, which may be fractional or negative\n    const inputDecimalTest = (val) => {\n        // scalars should not be made up for more than 7 characters\n        const maxLength = 7;\n\n        // 0 or 1 dash followed by optional digits and 0 or 1 dot\n        // then optional digits \n        const RE = /^-{0,1}\\d*\\.{0,1}\\d*$/;\n        return !RE.test(val) || val.length > maxLength;\n    }\n\n    const inputRowTest = (row) => {\n        // selected row must be less than or equal to N\n        const flagOne = rowRangeTest(row);\n\n        row = Number(row);\n        // cannot perform a row action on itself\n        const flagTwo = (row === R1) || (row === R2);\n        return flagOne || flagTwo;\n    }\n\n    // call the perform row addition function in the row operations module\n    const callperformRowAddition = () => {\n        performRowAddition(R1, R2, R1Scalar, getMatrix, setMatrix, dimRows)\n    }\n\n    return (\n        <div className='fContainer'>\n            <TextInput className='fInput' f={setR1Scalar} val={R1Scalar}\n                inputTest={inputDecimalTest} number={false}\n                testId={'scalarValueTop'} />\n            <div className='fDiv'> {bigX} Row </div>\n            <TextInput className='fInput' f={setR1} val={R1}\n                inputTest={inputRowTest} number={true}\n                testId={'R1ValueTop'} placeholder={'Rᵢ'} />\n                \n            <div className='fDiv'> &#43; Row </div>\n            <TextInput className='fInput' f={setR2} val={R2}\n                inputTest={inputRowTest} number={true}\n                testId={'R2ValueTop'} placeholder={'Rⱼ'} />\n            <Button className='fButton'\n                name={`${R1Scalar} ${bigX} R${R1} + R${R2} → R${R2}`} f={callperformRowAddition}\n                testId={\"rowAdditionButton\"} />\n        </div>\n    )\n}\n\nexport default FcontainerTop;","import React, { useState } from 'react';\nimport TextInput from '../controls/TextInput';\nimport Button from '../controls/Button';\nimport { performRowScale } from '../rowoperations/AdditionAndScaleOperations';\n\nconst multiplySymbol = '\\u00B7';\nconst divideSymbol = '\\u00F7';\n\n/**\n *  renders control for row scale operation\n */\nfunction FcontainerBottom( { getMatrix, setMatrix, rowRangeTest, dimRows} ) {\n    const [R1Scale, setR1Scale] = useState(1); // amount to scale row by\n    const [R1, setR1] = useState(''); // row used in operation\n    const [operation, setOperation] = useState(multiplySymbol); // multiply or divide\n\n    // switch between division and multiplication\n    const switchOperation = () => {\n        const op = operation === multiplySymbol ? divideSymbol : multiplySymbol;\n        setOperation(op);\n    };\n\n    // test scalar values, which may be fractional or negative\n    const inputDecimalTest = (val) => {\n        // scalars should not be made up for more than 7 characters\n        const maxLength = 7;\n\n        // scaling by 0 is not allowed\n        const zeroFlag = val === '0';\n\n        // 0 or 1 dash followed by optional digits and 0 or 1 dot\n        // then optional digits \n        const RE = /^-{0,1}\\d*\\.{0,1}\\d*$/;\n        return !RE.test(val) || val.length > maxLength || zeroFlag;\n    };\n\n    // call perform row scale function from row operations module\n    const callPerformRowScale = () => {\n        performRowScale(R1, R1Scale, operation, getMatrix, setMatrix, dimRows);\n    };\n\n    return (\n        <div className=\"fContainer\">\n            <div className=\"fDivLong\"> </div>\n            <div className=\"fDiv\"> Row </div>\n            <TextInput className='fInput' f={setR1} val={R1}\n                inputTest={rowRangeTest} number={true}\n                testId={'R1ValueBottom'}\n                placeholder={'Rᵢ'} />\n            <div className=\"opButtonContainer\">\n                <Button className='opButton'\n                    name={operation}\n                    testId={\"setOperationButton\"}\n                    f={switchOperation} />\n            </div>\n            <TextInput className='fInput' f={setR1Scale} val={R1Scale}\n                inputTest={inputDecimalTest} number={false}\n                testId={'scalarValueBottom'} />\n            <Button className='fButton'\n                name={`R${R1} ${operation} ${R1Scale} → R${R1}`}\n                testId={\"rowScaleButton\"}\n                f={callPerformRowScale} />\n        </div>\n    );\n}\n\nexport default FcontainerBottom;","import React from 'react';\nimport FcontainerTop from './FcontainerTop';\nimport FcontainerBottom from './FcontainerBottom';\n\n/**\n * renders both child components of the bottom\n * container \n */\nfunction FunctionContainer({ rows, getMatrix, setMatrix, dimRows }) {\n\n  // test row id which must be >= 1 and <= m\n  const rowRangeTest = (row) => {\n    return (isNaN(row) || row < 1 || row > rows);\n  }\n\n  return (\n    <div className='functionContainer'>\n      <FcontainerTop rows={rows}\n        dimRows={dimRows}\n        getMatrix={getMatrix}\n        setMatrix={setMatrix}\n        rowRangeTest={rowRangeTest} />\n      <FcontainerBottom rows={rows}\n        dimRows={dimRows}\n        getMatrix={getMatrix}\n        setMatrix={setMatrix}\n        rowRangeTest={rowRangeTest} />\n    </div>\n  );\n}\n\nexport default FunctionContainer;","// copy a matrix and its items\nfunction copyMatrix(matrix) {\n    const copyMatrix = [];\n    matrix.forEach(el => {\n        copyMatrix.push(el.slice(0));        \n    });\n\n    return copyMatrix;\n}\n\nexport default copyMatrix;\n","import copyMatrix from '../utils/CopyMatrix';\nimport sleep from '../utils/Sleep';\n\n/**\n * Algorithm to convert input matrix to reduced row echelon form. Based on\n * pseudocode from https://rosettacode.org/wiki/Reduced_row_echelon_form\n */\n\nconst nullFunction = () => { return }\nasync function convertMatrix(matrix, dimRows, setMatrix = nullFunction) {\n    matrix = copyMatrix(matrix); // create copy\n\n    let lead = 0; // pivot entry\n\n    const rowCount = matrix.length;\n    const colCount = matrix[0].length;\n\n    for (let r = 0; r < rowCount; r++) {\n        // lead exceeds bounds of nested array\n        if (lead >= colCount) {\n            return matrix;\n        }\n        let i = r;\n\n        // when leading cell in this row is a zero\n        if (matrix[i][lead] === 0) {\n            let res = dealWithZeroLead(matrix, i, r, lead, rowCount, colCount);\n            // exceeded bounds of matrix\n            if (res[0] === -1) {\n                return matrix;\n            } else {\n                [i, lead] = [...res];\n            }\n        }\n        matrix = swapRows(i, r, matrix);\n\n        await dimAnimation(dimRows, [i, r], 500);\n        setMatrix(matrix.flatMap(el => el));\n\n        let leadingVal = matrix[r][lead];\n\n        if (leadingVal !== 0) {\n            // divide row r by this value\n            matrix[r] = matrix[r].map(el => el / leadingVal);\n\n            await dimAnimation(dimRows, [r], 500);\n            setMatrix(matrix.flatMap(el => el));\n        }\n\n        for (let i = 0; i < rowCount; i++) {\n            leadingVal = matrix[i][lead];\n            if (i !== r) {\n                let scaledR = matrix[r].map(el => el * leadingVal);\n\n                let rowI = matrix[i];\n                // subtract the scaled row r from row i \n                for (let j = 0; j < colCount; j++) {\n                    rowI[j] -= scaledR[j];\n\n                    setMatrix(matrix.flatMap(el => el));\n                }\n\n\n            }\n            await dimAnimation(dimRows, [i], 250);\n        }\n        lead++;\n    }\n    return removeNegativeZero(matrix);\n}\n\n// performs dimming animations\nasync function dimAnimation(dimRows, rows, time) {\n    dimRows(rows);\n    await sleep(time);\n}\n\n\nfunction removeNegativeZero(matrix) {\n    let out = []\n\n    matrix.forEach(row => out\n        .push(row\n            .map(el => Object.is(el,-0) ? 0 : el)))\n\n    return out;\n}\n\nfunction dealWithZeroLead(matrix, i, r, lead, rowCount, colCount) {\n    while (matrix[i][lead] === 0) {\n        i++;\n\n        // i has exceeded bounds of matrix\n        if (i === rowCount) {\n            i = r;\n            lead++;\n\n            // leading col has exceeded bounds of\n            // nested matrix \n            if (lead === colCount) {\n                // signals termination condition\n                return [-1, -1];\n            }\n        }\n    }\n    return [i, lead];\n}\n\nfunction swapRows(i, r, matrix) {\n    matrix = copyMatrix(matrix); // create copy\n\n    let temp = matrix[i];\n    matrix[i] = matrix[r];\n    matrix[r] = temp;\n\n    return matrix;\n}\n\nexport default convertMatrix;","import React from 'react';\nimport FunctionContainer from './functioncontainer/FunctionContainer';\nimport Button from './controls/Button';\nimport convertMatrix from './rowelimination/RREFAlgorithm';\n\nfunction BottomContainer({ rows, getMatrix, setMatrix, undoLast, dimRows }) {\n  const rewindSymbol = '\\u21BA';\n\n  // convert the matrix to reduced row echelon form\n  const callConvertMatrix = async () => {\n    // get the converted matrix, which must be flattened\n    convertMatrix(getMatrix(), dimRows, setMatrix).then(res => {\n      setMatrix(res.flatMap(el => el));\n    });\n  };\n\n  return (\n    <div className='bottomContainer'>\n      <FunctionContainer rows={rows} dimRows={dimRows}\n        getMatrix={getMatrix}\n        setMatrix={setMatrix} />\n      <Button name={rewindSymbol} className={'undoButton'} f={undoLast}\n        testId={\"undoButton\"} />\n      <Button name={'Convert to row canonical form'} className={'echeleonButton'}\n        f={callConvertMatrix} />\n    </div>\n  );\n}\n\nexport default BottomContainer;","import React, { useState, createContext } from 'react';\n\n/**\n *  Contains the history of states stored as a stack\n */\nconst HistoryContext = createContext();\n\nfunction HistoryProvider({ children }) {\n    const startDimensions = { n: 4, m: 5 };\n    const zeroMatrix = new Array(startDimensions.m * startDimensions.n).fill(0);\n    const startState = { matrix: zeroMatrix, dimensions: startDimensions }\n\n    const [history, setHistory] = useState([startState]);\n\n    // return the last saved state\n    const undo = () => {\n\n        if (history.length === 1) {\n            return false;\n        }\n\n        const lastState = history.slice(0).pop();\n        setHistory(history.slice(0, history.length - 1));\n\n        return lastState;\n    }\n\n    // add the current state to the history\n    const addState = (matrix) => {\n        const savedStates = history.slice(0);\n        savedStates.push(matrix);\n        setHistory(savedStates);\n    }\n\n    // set as empty history array\n    const resetHistory = (zeroMatrix) => {\n        setHistory([zeroMatrix]);\n    }\n\n    return (\n        <HistoryContext.Provider value={{ undo, addState, resetHistory }}>\n            {children}\n        </ HistoryContext.Provider>\n    );\n}\n\nexport { HistoryProvider, HistoryContext };\n\n","import React from 'react';\n\n/**\n * A cell in the matrix. Is used to input and display values\n */\nfunction Cell({ cols, index, opacity, matrix, setMatrix }) {\n    const getColour = (i) => {\n        // the index of the item mod |columns| is |columns|-1 \n        const cellColour = (i % cols) === cols - 1 ? '#cecece' : 'white';\n\n        return cellColour;\n    }\n\n    const style = {\n        opacity: opacity,\n        transitionProperty: \"opacity\",\n        transitionDuration: \"0.2s\",\n        backgroundColor: getColour(index)\n    };\n\n    //update the matrix state\n    const updateState = (val) => {\n        let matrixCopy = matrix.slice(0);\n        matrixCopy[index] = val;\n        setMatrix(matrixCopy);\n    }\n\n    const updateVal = (val) => {\n        // 0 or 1 dash followed by optional digits and 0 or 1 dot\n        // then optional digits \n        let RE = /^-{0,1}\\d*\\.{0,1}\\d*$/;\n        if (!RE.test(val)) {\n            // return on invalid input \n            return;\n        } else {\n            updateState(val);\n        }\n    }\n\n    return (\n        <div className='cell' >\n            <input type='text' className='numInput'\n                value={matrix[index]}\n                style={style}\n                onChange={(e) => updateVal(e.target.value)}\n                data-testid={index} />\n        </div>\n    );\n}\n\nexport default Cell;","import React from 'react';\nimport Cell from './Cell';\n\n/**\n * The matrix of cells \n */\nfunction Matrix({ cols, dimmedCells, matrix, setMatrix }) {\n    const gridStyle = { gridTemplateColumns: `repeat(${cols}, minmax(auto, 1fr))` };\n\n    // Render each cell of the matrix using dimensions \n    // passed in props\n    const renderCells = (arr) => {\n        return (\n            arr.map( (el, index)=> {\n\n                let opacity = dimmedCells.includes(index)? 0: 1;\n\n                return <Cell index={index} key={index} matrix={matrix} \n                        setMatrix={setMatrix} cols={cols}\n                        opacity={opacity} />\n            })\n        );\n    };\n\n    return (\n        <div className=\"matrix\" style={gridStyle}>\n            {renderCells(matrix)}\n        </div>\n    );\n}\n\nexport default Matrix;","import React from 'react';\n\nfunction SwapButton({ clicked, f, i, name }) {\n    let style = {};\n    if (clicked) {\n        style = { backgroundColor: '#3CBC8D' };\n    }\n\n    return (\n        <button className=\"swapButton\" onClick={(e) => { f(i); }}\n            style={style}>\n            {name}\n        </button>\n    );\n}\n\nexport default SwapButton;","// swap two rows in the matrix\nconst doSwap = (i, swapPair, setSwapPair, arrayToMatrix, setMatrix, dimRows) => {\n    let pair = swapPair;\n    pair.push(i);\n    setSwapPair(pair.slice(0));\n\n    // if two rows have been selected to swap\n    if (swapPair.length === 2) {\n        // indexes of rows being swapped\n        let first = swapPair[0];\n        let second = swapPair[1];\n\n        dimRows([first, second]);\n\n        let arr = arrayToMatrix();\n\n        // the row being overwritten\n        let temp = arr[first];\n        arr[first] = arr[second];\n        arr[second] = temp;\n\n        let flattened = arr.flatMap(el => el);\n        setMatrix(flattened);\n        setSwapPair([]);\n    }\n};\n\nexport default doSwap;","import React from 'react';\nimport Matrix from './Matrix';\nimport SwapButton from '../controls/SwapButton';\nimport doSwap from '../rowoperations/SwapOperation';\n\n/**\n * Renders the matrix and side buttons\n */\nfunction MatrixContainer({ dimensions, swapPair, setSwapPair, matrix, setMatrix,\n    arrayToMatrix, dimmedCells, dimRows }) {\n    const cols = dimensions.n;\n\n    // call the swap row operation to swap two selected\n    // rows\n    const callDoSwap = (i) => {\n        doSwap(i, swapPair, setSwapPair,\n            arrayToMatrix, setMatrix, dimRows);\n    }\n\n    const renderSwapButtons = () => {\n        // there should be as many buttons as rows\n        const arr = new Array(dimensions.m).fill(0);\n\n        return arr.map((el, index) => {\n\n            let clicked = false;\n            // if this button has been clicked\n            if (index === swapPair[0] || index === swapPair[1]) {\n                clicked = true;\n            }\n\n            return <SwapButton i={index} key={index} name={`⟺ Row ${index + 1}`}\n                f={callDoSwap} clicked={clicked} />\n        })\n    }\n\n    return (\n        <div className='matrixContainer'>\n            <div className='swapButtons'>\n                {renderSwapButtons()}\n            </div>\n            <Matrix cols={cols}\n                matrix={matrix}\n                setMatrix={setMatrix}\n                dimmedCells={dimmedCells} />\n        </div>\n    );\n}\n\nexport default MatrixContainer;","import React from 'react';\n\nfunction TopRowItem({ heading }) {\n    return (\n        <div className='topRowItem'>{heading}</div>\n    );\n}\n\nexport default TopRowItem;","import React from 'react';\nimport TopRowItem from './TopRowItem';\n\nfunction TopRow({ cols }) {\n    const rowHeads = ['x₁', 'x₂', 'x₃', 'x₄', 'x₅', 'x₆', 'x₇', 'x₈', 'x₉', 'd'];\n\n    const makeColHeaders = () => {\n        const emptyArray = new Array(cols).fill(0);\n        let i = 0;\n        let headingsEnd = rowHeads.length - 1;\n\n        return (\n            emptyArray.map(el => {\n                // if this is the final column heading it is a constant and should use 'd'\n                let heading = i === cols - 1 ? rowHeads[headingsEnd] : rowHeads[i];\n                i++;\n\n                return (\n                    <TopRowItem heading={heading} key={i} />\n                );\n            }\n            )\n        );\n    };\n\n    return (\n        <div className='topRow'>{makeColHeaders()}</div>\n    );\n}\n\nexport default TopRow;","import React, { useState, useContext } from 'react';\nimport TopContainer from './TopContainer';\nimport BottomContainer from './BottomContainer';\nimport { HistoryContext } from './providers/HistoryProvider';\nimport MatrixContainer from './matrixcontainer/MatrixContainer';\nimport TopRow from './toprow/TopRow';\nimport sleep from './utils/Sleep';\n\nimport './style.css';\n\nfunction App() {\n  const startDimensions = { m: 4, n: 5 };\n  const zeroMatrix = new Array(startDimensions.m * startDimensions.n).fill(0);\n\n  // create an array with random values as start state\n  const makeRandomArray = () => {\n    const min = -10;\n    const max = 10;\n\n    const size = startDimensions.m * startDimensions.n;\n    const arr = new Array(size).fill(0);\n\n    // map each 0 element to a random member in range min to max\n    return arr.map(el => {\n      return Math.floor(Math.random() * (max - min + 1) + min);\n    });\n  };\n\n  const historyContext = useContext(HistoryContext); // stores history of past states\n\n  const [dimensions, setDimensions] = useState(startDimensions); // dimension of array (mXn)\n  const [m, setM] = useState('');\n  const [n, setN] = useState('');\n  const [matrix, setMatrix] = useState(makeRandomArray()); // the matrix represented as a 1D array\n  const [swapPair, setSwapPair] = useState([]); // two rows to be swapped\n  const [dimmedCells, setDimmedCells] = useState([]); // cells dimmed during transition animations\n\n  // create an array of the required dimensions\n  const makeArray = () => {\n    resetMatrix();\n    if (m === '' || n === '') {\n      return;\n    }\n\n    const size = m * n;\n    setDimensions({ m, n });\n\n    const matrix = new Array(size).fill(0);\n    historyContext.resetHistory({ matrix: zeroMatrix, dimensions: startDimensions });\n    updateMatrixState(matrix);\n  };\n\n  // reset matrix to original dimensions and values\n  const resetMatrix = () => {\n    setN('');\n    setM('');\n    setDimensions(startDimensions);\n    setMatrix(zeroMatrix);\n    setSwapPair([]);\n    historyContext.resetHistory({ matrix: zeroMatrix, dimensions: startDimensions });\n  };\n\n  // gets previous state from history\n  // and update current state to reflect it\n  const undoLast = () => {\n    const last = historyContext.undo();\n\n    // history is empty\n    if (!last) {\n      resetMatrix();\n    } else {\n      setMatrix(last.matrix);\n      setDimensions(last.dimensions);\n    }\n  };\n\n  // update matrix state and add old matrix to memory\n  const updateMatrixState = (newMatrix) => {\n    const mapToNumberOrZero = (num) => Number.isNaN(num)? 0: Number(num);\n\n    const roundToFour = (num) => Math.round((mapToNumberOrZero(num) + Number.EPSILON) * 10000)/10000;\n\n    historyContext.addState({ matrix, dimensions });\n    setMatrix(newMatrix.map(num => roundToFour(num)));\n  };\n\n  // converts the matrix, which is currently in 1D array form, to\n  // 2D array\n  const arrayToMatrix = () => {\n    const out = [];\n    const cols = dimensions.n;\n    // iterate in chunks of the column size\n    for (let i = 0; i < matrix.length; i = i + cols) {\n      out.push(matrix.slice(i, i + cols));\n    }\n    return out;\n  };\n\n  // triggers transition animation to signify row operation. Takes an array of \n  // row indices as its sole argument\n  const dimRows = async (rows) => {\n    const cols = dimensions.n;\n    const out = [];\n\n    rows.forEach(row => {\n      let startIndex = row * cols;\n      out.push(startIndex);\n\n      // add index of the cells in this row\n      for (let i = startIndex + 1; i < startIndex + cols; i++) {\n        out.push(i);\n      }\n    });\n\n    // add these to array of dimmed cells\n    setDimmedCells(out);\n    await sleep(250);\n    setDimmedCells([]);\n  };\n\n  return (\n    <div className='mainContainer'>\n      <TopContainer setM={setM} setN={setN}\n        m={m} n={n}\n        makeArray={makeArray}\n        resetMatrix={resetMatrix} />\n      <TopRow cols={dimensions.n} />\n      <MatrixContainer dimensions={dimensions}\n        swapPair={swapPair}\n        setSwapPair={setSwapPair}\n        arrayToMatrix={arrayToMatrix}\n        matrix={matrix}\n        setMatrix={updateMatrixState}\n        dimmedCells={dimmedCells}\n        dimRows={dimRows} />\n      <BottomContainer rows={dimensions.m}\n        getMatrix={arrayToMatrix}\n        setMatrix={updateMatrixState}\n        undoLast={undoLast}\n        setDimmedCells={setDimmedCells}\n        dimRows={dimRows} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport { HistoryProvider } from './components/providers/HistoryProvider';\n \nReactDOM.render(\n    <HistoryProvider>\n        <App />\n    </HistoryProvider>,\n    document.getElementById('root'));"],"sourceRoot":""}