{"version":3,"sources":["components/utils/Sleep.js","components/controls/TextInput.js","components/controls/Button.js","components/TopContainer.js","components/utils/ArithmeticUtils.js","components/rowoperations/AdditionAndScaleOperations.js","components/functioncontainer/FcontainerTop.js","components/functioncontainer/FcontainerBottom.js","components/functioncontainer/FunctionContainer.js","components/rowelimination/RREFAlgorithm.js","components/BottomContainer.js","components/providers/HistoryProvider.js","components/utils/StringToFractionUtil.js","components/matrixcontainer/Cell.js","components/matrixcontainer/Matrix.js","components/controls/SwapButton.js","components/rowoperations/SwapOperation.js","components/matrixcontainer/MatrixContainer.js","components/toprow/TopRowItem.js","components/toprow/TopRow.js","components/App.js","index.js"],"names":["sleep","time","Promise","resolve","setTimeout","TextInput","className","val","inputTest","number","f","placeholder","testId","useState","backgroundColor","style","setStyle","value","onChange","e","then","x","Number","updateVal","target","data-testid","Button","name","onClick","TopContainer","m","setM","n","setN","makeArray","resetMatrix","topInputTest","isNaN","copyMatrix","matrix","map","row","toBigNumber","defaultOutput","BigNumber","stringVal","toString","indexOf","isPartiallyComplete","splitFraction","split","numerator","denominator","result","divide","zeroIfBelowMin","splitString","equals","a","b","isEqualTo","minus","multiply","multipliedBy","dividedBy","num","abs","isLessThan","toFractionalString","isInteger","fraction","toFraction","zero","maxNum","Math","pow","parseScalar","scalar","defaultValue","rowRangeTest","performRowAddition","R1","R2","R1Scalar","getMatrix","setMatrix","dimRows","length","console","error","R1index","R2index","parsedScalar","numericMatrix","scaledR1","el","addedR2","i","scaledR1Value","plus","maxResultCheck","includes","flatMatrix","flatMap","zeroResultCheck","inNum","outNum","isGreaterThan","FcontainerTop","setR1Scalar","setR1","setR2","inputRowTest","flagOne","test","FcontainerBottom","R1Scale","setR1Scale","operation","setOperation","zeroFlag","parseFloat","performRowScale","FunctionContainer","rows","ZERO","nullFunction","lead","rowCount","colCount","r","mapNumericMatrixToStringForm","res","dealWithZeroLead","swapRows","dimAnimation","leadingVal","scaledR","rowI","j","temp","convertMatrix","BottomContainer","undoLast","callConvertMatrix","HistoryContext","createContext","HistoryProvider","children","startDimensions","startState","Array","fill","dimensions","history","setHistory","Provider","undo","lastState","slice","pop","addState","savedStates","push","resetHistory","zeroMatrix","RE","Cell","cols","index","opacity","transitionProperty","transitionDuration","updateState","maxLength","checkFraction","matrixCopy","type","Matrix","dimmedCells","gridStyle","gridTemplateColumns","key","SwapButton","clicked","doSwap","swapPair","setSwapPair","arrayToMatrix","pair","first","second","arr","MatrixContainer","callDoSwap","TopRowItem","heading","TopRow","rowHeads","emptyArray","headingsEnd","makeColHeaders","App","historyContext","useContext","setDimensions","floor","random","setDimmedCells","updateMatrixState","newMatrix","out","forEach","startIndex","size","last","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.32d5ed04.chunk.js","sourcesContent":["const sleep = (time) => {\n    return new Promise((resolve) => setTimeout(resolve, time));\n};\n\nexport default sleep;","import React, { useState } from 'react';\nimport sleep from '../utils/Sleep';\n\nfunction TextInput({ className, val, inputTest, number, f, placeholder, testId }) {\n    const [style, setStyle] = useState({ backgroundColor: 'white' });\n\n    const updateVal = (val) => {\n        // show a red indicator if value fails input test\n        if (inputTest(val)) {\n            setStyle({ backgroundColor: '#ec3643' });\n            sleep(500).then(x => setStyle({ backgroundColor: 'white' }));\n            f('');\n        } else {\n            if (number) {\n                f(Number(val));\n            } else {\n                f(val);\n            }\n        }\n    };\n\n    return (\n        <input className={className}\n            value={val}\n            style={style}\n            onChange={(e) => updateVal(e.target.value)}\n            placeholder={placeholder}\n            data-testid={testId} />\n    );\n}\n\nexport default TextInput;","import React from 'react';\n\nfunction Button({ className, name, testId, f }) {\n    return (\n        <button className={className} onClick={(e) => f()}\n            data-testid={testId} >\n            {name}\n        </button>);\n}\n\nexport default Button;","import React from 'react';\nimport TextInput from './controls/TextInput';\nimport Button from './controls/Button';\n\nfunction TopContainer({ m, setM, n, setN, makeArray, resetMatrix }) {\n  // test input for dimensions. m,n must be between 1 and 10.\n  const topInputTest = (val) => {\n    return (isNaN(val) || val < 1 || val > 10);\n  };\n\n  return (\n    <div className='topContainer'>\n      <TextInput className='topInput' val={m} inputTest={topInputTest}\n        f={setM} placeholder={'m'} number={true} testId={\"mInput\"} />\n      <div className='topDiv'>X</div>\n      <TextInput className='topInput' val={n} inputTest={topInputTest}\n        f={setN} placeholder={'n'} number={true} testId={\"nInput\"} />\n      <Button name='Make matrix' f={makeArray} className={'topButton'} />\n      <Button name='Reset' f={resetMatrix} className={'topButton'} />\n    </div>\n  );\n}\n\nexport default TopContainer;","import BigNumber from 'bignumber.js';\n\n// Copy a matrix and its items\nfunction copyMatrix(matrix) {\n    return matrix.map(row => {\n        return row.map(val => toBigNumber(val))\n    });\n}\n\nfunction toBigNumber(val, defaultOutput=0) {\n    if (val instanceof BigNumber) {\n        return val;\n    }\n\n    const stringVal = val.toString();\n\n    // Integer value\n    if (stringVal && stringVal.indexOf('/') === -1 && stringVal !== '-') {\n        return new BigNumber(stringVal, 10);\n    }\n\n    if (!stringVal || stringVal === '-' || stringVal === '/' || isPartiallyComplete(stringVal)) {\n        return new BigNumber(defaultOutput, 10);\n    }\n\n    const splitFraction = stringVal.split('/');\n    const numerator = new BigNumber(splitFraction[0], 10);\n    const denominator = new BigNumber(splitFraction[1], 10);\n\n    const result = divide(numerator, denominator);\n    return zeroIfBelowMin(result);\n}\n\n// A fraction with only one side assigned\nfunction isPartiallyComplete(value) {\n    const splitString = value.split('/');\n    if (!!splitString[0] && !!splitString[1]) return false;\n    return true;\n}\n\nfunction equals(a, b) {\n    return a.isEqualTo(b);\n}\n\nfunction plus(a, b) {\n    const res = a.plus(b);\n    return zeroIfBelowMin(res);\n}\n\nfunction minus(a, b) {\n    const res = a.minus(b);\n    return zeroIfBelowMin(res);\n}\n\nfunction multiply(a, b) {\n    const res = a.multipliedBy(b);\n    return zeroIfBelowMin(res);\n}\n\nfunction divide(a, b) {\n    const res = a.dividedBy(b);\n    return zeroIfBelowMin(res);\n}\n\nfunction greaterThan(a, b) {\n    return a.isGreaterThan(b);\n}\n\nfunction zeroIfBelowMin(num) {\n    const absoluteValueNum = num.abs();\n    if (absoluteValueNum.isLessThan(new BigNumber(0.00002, 10))) {\n        return new BigNumber(0, 10);\n    }\n    return num;\n}\n\nfunction toFractionalString(a) {\n    if (!(a instanceof BigNumber)) {\n        a = new BigNumber(a, 10);\n    }\n\n    if (a.isInteger()) {\n        return a.toString();\n    }\n\n    const fraction = a.toFraction(100000);\n    const numerator = fraction[0].toString();\n    const denominator = fraction[1].toString();\n\n    if (denominator === '1') {\n        return numerator;\n    }\n\n    return `${numerator}/${denominator}`;\n}\n\n\nexport { copyMatrix, toFractionalString, toBigNumber, equals, plus, minus, divide, multiply, greaterThan };\n","import {\n    copyMatrix, toFractionalString, toBigNumber, equals,\n    plus, divide, multiply, greaterThan\n} from '../utils/ArithmeticUtils';\nimport BigNumber from 'bignumber.js';\n\n/**\n * Contains logic for the row addition and row scale operations\n */\nconst zero = new BigNumber(0, 10);\nconst maxNum = new BigNumber(1 * Math.pow(10, 15), 10);\nconst INVALID = \"INVALID\";\n\n// Parse Scalar value into BigNumber form\nconst parseScalar = (scalar, defaultValue) => {\n    return toBigNumber(scalar, defaultValue);\n};\n\n// Test row id which must be >= 1 and <= m\nconst rowRangeTest = (row, m) => {\n    return (isNaN(row) || row < 1 || row > m);\n};\n\n// Adds a scaled R1 to R2 and updates matrix state\nconst performRowAddition = (R1, R2, R1Scalar, getMatrix, setMatrix, dimRows) => {\n    let m = getMatrix().length;\n\n    // Invalid rows selected\n    if (rowRangeTest(R1, m) || rowRangeTest(R2, m)) {\n        console.error('Both rows must be selected');\n        return;\n    }\n\n    let R1index = R1 - 1; // rows are one-indexed\n    let R2index = R2 - 1;\n\n    // Attempt to parse the scalar value, with default \n    // value of 0 otherwise\n    let parsedScalar = parseScalar(R1Scalar, 0);\n    if (!parsedScalar) {\n        // return if an invalid scalar was provided\n        return;\n    }\n\n    // Get copy of the matrix and cast it to BigNumber\n    const numericMatrix = copyMatrix(getMatrix());\n\n    // Scale R1 by the required amount\n    const scaledR1 = numericMatrix[R1index].map(el => multiply(el, parsedScalar));\n    // Add scaled R1 to R2\n    const addedR2 = numericMatrix[R2index].map((el, i) => {\n        const scaledR1Value = scaledR1[i];\n        const result = plus(el, scaledR1Value);\n        return maxResultCheck(result);\n    });\n\n    if (!addedR2.includes(INVALID)) {\n        numericMatrix[R2index] = addedR2;\n        // Return with no change if division resulted in \n        // value greater than maxNum\n    } else {\n        return;\n    }\n\n    // Flatten result and update parent component \n    const flatMatrix = numericMatrix.flatMap(row => (row.map(el => toFractionalString(el))));\n\n    dimRows([R2index]);\n    setMatrix(flatMatrix);\n};\n\n// Multiplies/divides R by some value\nconst performRowScale = (R1, R1Scale, operation, getMatrix, setMatrix, dimRows) => {\n    const multiplySymbol = '\\u00B7';\n\n    let R1index = R1 - 1; // Rows are one-indexed\n    if (R1index < 0) {\n        return;\n    }\n\n    // Attempt to parse the scalar value, with default \n    // value of 1 otherwise\n    let parsedScalar = parseScalar(R1Scale, 1);\n    if (!parsedScalar) {\n        // Return if an invalid scalar was provided\n        return;\n    }\n\n    if (equals(parsedScalar, zero)) {\n        return;\n    }\n\n    // Get copy of the matrix and cast it to BigNumber\n    const numericMatrix = copyMatrix(getMatrix());\n\n    // Scale R1 by the required amount\n    const scaledR1 = numericMatrix[R1index].map(el => {\n        if (operation === multiplySymbol) {\n            const result = multiply(el, parsedScalar);\n            return maxResultCheck(zeroResultCheck(el, result));\n        } else {\n            const result = divide(el, parsedScalar);\n            return maxResultCheck(zeroResultCheck(el, result));\n        }\n    });\n\n    if (!scaledR1.includes(INVALID)) {\n        numericMatrix[R1index] = scaledR1;\n        // Return with no change if division resulted in \n        // a value that is rounded to 0 or greater than \n        // maxNum\n    } else {\n        return;\n    }\n\n    // Flatten result and cast to String \n    const flatMatrix = numericMatrix.flatMap(row => (row.map(el => toFractionalString(el))));\n\n    dimRows([R1index]);\n    setMatrix(flatMatrix);\n};\n\nconst zeroResultCheck = (inNum, outNum) => {\n    if (!equals(inNum, zero) && equals(outNum, zero)) {\n        return INVALID;\n    }\n    return outNum;\n}\n\nconst maxResultCheck = (inNum) => {\n    if (inNum === INVALID || greaterThan(inNum.abs(), maxNum)) {\n        return INVALID;\n    }\n    return inNum;\n}\n\nexport { performRowAddition, performRowScale };","import React, { useState } from 'react';\nimport TextInput from '../controls/TextInput';\nimport Button from '../controls/Button';\nimport { performRowAddition } from '../rowoperations/AdditionAndScaleOperations';\n\n/**\n * Stores and renders controls for row addition operation\n */\nfunction FcontainerTop( { rowRangeTest, getMatrix, setMatrix, dimRows }) {\n    const bigX = '\\u2715'\n    const [R1Scalar, setR1Scalar] = useState(1); // amount to scale row by\n    const [R1, setR1] = useState(''); // first row used in operation\n    const [R2, setR2] = useState(''); // second row used in operation\n\n    // test scalar values, which may be fractional or negative\n    const inputDecimalTest = (val) => {\n        // scalars should not be made up for more than 7 characters\n        const maxLength = 8;\n\n        // 0 or 1 dash followed by optional digits and 0 or 1 slash\n        // then optional digits greater than 0\n        const RE = /^-{0,1}\\d*\\/{0,1}[1-9]*$/;\n        return !RE.test(val) || val.length > maxLength;\n    }\n\n    const inputRowTest = (row) => {\n        // selected row must be less than or equal to N\n        const flagOne = rowRangeTest(row);\n\n        row = Number(row);\n        // cannot perform a row action on itself\n        const flagTwo = (row === R1) || (row === R2);\n        return flagOne || flagTwo;\n    }\n\n    // call the perform row addition function in the row operations module\n    const callPerformRowAddition = () => {\n        performRowAddition(R1, R2, R1Scalar, getMatrix, setMatrix, dimRows)\n    }\n\n    return (\n        <div className='fContainer'>\n            <TextInput className='fInput' f={setR1Scalar} val={R1Scalar}\n                inputTest={inputDecimalTest} number={false}\n                testId={'scalarValueTop'} />\n            <div className='fDiv'> {bigX} Row </div>\n            <TextInput className='fInput' f={setR1} val={R1}\n                inputTest={inputRowTest} number={true}\n                testId={'R1ValueTop'} placeholder={'Rᵢ'} />\n                \n            <div className='fDiv'> &#43; Row </div>\n            <TextInput className='fInput' f={setR2} val={R2}\n                inputTest={inputRowTest} number={true}\n                testId={'R2ValueTop'} placeholder={'Rⱼ'} />\n            <Button className='fButton'\n                name={`${R1Scalar} ${bigX} R${R1} + R${R2} → R${R2}`} f={callPerformRowAddition}\n                testId={\"rowAdditionButton\"} />\n        </div>\n    )\n}\n\nexport default FcontainerTop;","import React, { useState } from 'react';\nimport TextInput from '../controls/TextInput';\nimport Button from '../controls/Button';\nimport { performRowScale } from '../rowoperations/AdditionAndScaleOperations';\n\nconst multiplySymbol = '\\u00B7';\nconst divideSymbol = '\\u00F7';\n\n/**\n *  Renders control for row scale operation\n */\nfunction FcontainerBottom( { getMatrix, setMatrix, rowRangeTest, dimRows} ) {\n    const [R1Scale, setR1Scale] = useState(1); // Amount to scale row by\n    const [R1, setR1] = useState(''); // Row used in operation\n    const [operation, setOperation] = useState(multiplySymbol); // Multiply or divide\n\n    // Switch between division and multiplication\n    const switchOperation = () => {\n        const op = operation === multiplySymbol ? divideSymbol : multiplySymbol;\n        setOperation(op);\n    };\n\n    // Test scalar values, which may be fractional or negative\n    const inputDecimalTest = (val) => {\n        // Scalars should not be made up for more than 8 characters\n        const maxLength = 8;\n\n        // Scaling by 0 is not allowed\n        const zeroFlag = val === '0' || parseFloat(val) === 0;\n\n        // 0 or 1 dash followed by at least one digit and 0 or 1 slash\n        // then optional digits\n        const RE = /^-{0,1}\\d*\\/{0,1}[1-9]*$/;\n        return !RE.test(val) || val.length > maxLength || zeroFlag;\n    };\n\n    // Call perform row scale function from row operations module\n    const callPerformRowScale = () => {\n        performRowScale(R1, R1Scale, operation, getMatrix, setMatrix, dimRows);\n    };\n\n    return (\n        <div className=\"fContainer\">\n            <div className=\"fDivLong\"> </div>\n            <div className=\"fDiv\"> Row </div>\n            <TextInput className='fInput' f={setR1} val={R1}\n                inputTest={rowRangeTest} number={true}\n                testId={'R1ValueBottom'}\n                placeholder={'Rᵢ'} />\n            <div className=\"opButtonContainer\">\n                <Button className='opButton'\n                    name={operation}\n                    testId={\"setOperationButton\"}\n                    f={switchOperation} />\n            </div>\n            <TextInput className='fInput' f={setR1Scale} val={R1Scale}\n                inputTest={inputDecimalTest} number={false}\n                testId={'scalarValueBottom'} />\n            <Button className='fButton'\n                name={`R${R1} ${operation} ${R1Scale} → R${R1}`}\n                testId={\"rowScaleButton\"}\n                f={callPerformRowScale} />\n        </div>\n    );\n}\n\nexport default FcontainerBottom;","import React from 'react';\nimport FcontainerTop from './FcontainerTop';\nimport FcontainerBottom from './FcontainerBottom';\n\n/**\n * Renders both child components of the bottom\n * container \n */\nfunction FunctionContainer({ rows, getMatrix, setMatrix, dimRows }) {\n\n  // Test row id which must be >= 1 and <= m\n  const rowRangeTest = (row) => {\n    return (isNaN(row) || row < 1 || row > rows);\n  }\n\n  return (\n    <div className='functionContainer'>\n      <FcontainerTop rows={rows}\n        dimRows={dimRows}\n        getMatrix={getMatrix}\n        setMatrix={setMatrix}\n        rowRangeTest={rowRangeTest} />\n      <FcontainerBottom rows={rows}\n        dimRows={dimRows}\n        getMatrix={getMatrix}\n        setMatrix={setMatrix}\n        rowRangeTest={rowRangeTest} />\n    </div>\n  );\n}\n\nexport default FunctionContainer;","import { copyMatrix, toFractionalString, equals, minus, divide, multiply } from '../utils/ArithmeticUtils';\nimport sleep from '../utils/Sleep';\nimport BigNumber from 'bignumber.js';\n\n/**\n * Algorithm to convert input matrix to reduced row echelon form. Based on\n * pseudocode from https://rosettacode.org/wiki/Reduced_row_echelon_form\n */\nconst ZERO = new BigNumber(0, 10);\n\nconst nullFunction = () => { return }\nasync function convertMatrix(matrix, dimRows, setMatrix = nullFunction) {\n    // Get a copy of the matrix in BigNumber form\n    let numericMatrix = copyMatrix(matrix);\n\n    let lead = 0; // pivot entry\n\n    const rowCount = numericMatrix.length;\n    const colCount = numericMatrix[0].length;\n\n    for (let r = 0; r < rowCount; r++) {\n        // Lead exceeds bounds of nested array\n        if (lead >= colCount) {\n            return mapNumericMatrixToStringForm(numericMatrix);\n        }\n        let i = r;\n\n        // When leading cell in this row is a zero\n        if (equals(numericMatrix[i][lead], ZERO)) {\n            let res = dealWithZeroLead(numericMatrix, i, r, lead, rowCount, colCount);\n            // exceeded bounds of matrix\n            if (res[0] === -1) {\n                return mapNumericMatrixToStringForm(numericMatrix);;\n            } else {\n                [i, lead] = [...res];\n            }\n        }\n        numericMatrix = swapRows(i, r, numericMatrix);\n\n        await dimAnimation(dimRows, [i, r], 500);\n        setMatrix(mapNumericMatrixToStringForm(numericMatrix));\n\n        let leadingVal = numericMatrix[r][lead];\n\n        if (!equals(leadingVal, ZERO)) {\n            // Divide row r by this value\n            numericMatrix[r] = numericMatrix[r].map(el => divide(el, leadingVal));\n\n            await dimAnimation(dimRows, [r], 500);\n            setMatrix(mapNumericMatrixToStringForm(numericMatrix));\n        }\n\n        for (let i = 0; i < rowCount; i++) {\n            leadingVal = numericMatrix[i][lead];\n            if (i !== r) {\n                let scaledR = numericMatrix[r].map(el => multiply(el, leadingVal));\n\n                let rowI = numericMatrix[i];\n                // Subtract the scaled row r from row i \n                for (let j = 0; j < colCount; j++) {\n                    rowI[j] = minus(rowI[j], scaledR[j]);\n\n                    setMatrix(mapNumericMatrixToStringForm(numericMatrix));\n                }\n\n\n            }\n            await dimAnimation(dimRows, [i], 250);\n        }\n        lead++;\n    }\n    return mapNumericMatrixToStringForm(numericMatrix);\n}\n\n// Performs dimming animation\nasync function dimAnimation(dimRows, rows, time) {\n    dimRows(rows);\n    await sleep(time);\n}\n\nfunction dealWithZeroLead(matrix, i, r, lead, rowCount, colCount) {\n    while (equals(matrix[i][lead], ZERO)) {\n        i++;\n\n        // i has exceeded bounds of matrix\n        if (i === rowCount) {\n            i = r;\n            lead++;\n\n            // Leading col has exceeded bounds of\n            // nested matrix \n            if (lead === colCount) {\n                // Signals termination condition\n                return [-1, -1];\n            }\n        }\n    }\n    return [i, lead];\n}\n\nfunction swapRows(i, r, matrix) {\n    matrix = copyMatrix(matrix); // Create copy\n\n    let temp = matrix[i];\n    matrix[i] = matrix[r];\n    matrix[r] = temp;\n\n    return matrix;\n}\n\nfunction mapNumericMatrixToStringForm(numericMatrix) {\n    return numericMatrix.flatMap(row => row.map(el => toFractionalString(el)))\n}\n\nexport default convertMatrix;","import React from 'react';\nimport FunctionContainer from './functioncontainer/FunctionContainer';\nimport Button from './controls/Button';\nimport convertMatrix from './rowelimination/RREFAlgorithm';\n\nfunction BottomContainer({ rows, getMatrix, setMatrix, undoLast, dimRows }) {\n  const rewindSymbol = '\\u21BA';\n\n  // convert the matrix to reduced row echelon form\n  const callConvertMatrix = async () => {\n    // get the converted matrix, which must be flattened and converted \n    // back to Strings\n    convertMatrix(getMatrix(), dimRows, setMatrix).then(res => {\n      setMatrix(res);\n    });\n  };\n\n  return (\n    <div className='bottomContainer'>\n      <FunctionContainer rows={rows} dimRows={dimRows}\n        getMatrix={getMatrix}\n        setMatrix={setMatrix} />\n      <Button name={rewindSymbol} className={'undoButton'} f={undoLast}\n        testId={\"undoButton\"} />\n      <Button name={'Convert to row canonical form'} className={'echeleonButton'}\n        f={callConvertMatrix} />\n    </div>\n  );\n}\n\nexport default BottomContainer;","import React, { useState, createContext } from 'react';\n\n/**\n *  Contains the history of states stored as a stack\n */\nconst HistoryContext = createContext();\n\nfunction HistoryProvider({ children }) {\n    const startDimensions = { n: 4, m: 5 };\n    const zeroMatrix = new Array(startDimensions.m * startDimensions.n).fill(0);\n    const startState = { matrix: zeroMatrix, dimensions: startDimensions }\n\n    const [history, setHistory] = useState([startState]);\n\n    // Return the last saved state\n    const undo = () => {\n\n        if (history.length === 1) {\n            return false;\n        }\n\n        const lastState = history.slice(0).pop();\n        setHistory(history.slice(0, history.length - 1));\n\n        return lastState;\n    }\n\n    // Add the current state to the history\n    const addState = (matrix) => {\n        const savedStates = history.slice(0);\n        savedStates.push(matrix);\n        setHistory(savedStates);\n    }\n\n    // Set as empty history array\n    const resetHistory = (zeroMatrix) => {\n        setHistory([zeroMatrix]);\n    }\n\n    return (\n        <HistoryContext.Provider value={{ undo, addState, resetHistory }}>\n            {children}\n        </ HistoryContext.Provider>\n    );\n}\n\nexport { HistoryProvider, HistoryContext };\n\n","// 0 or 1 dash followed by optional digits and 0 or 1 slash\n// then optional digits \nconst RE = /^-{0,1}\\d*\\/{0,1}\\d*$/;\nconst maxValLength = 10;\n\n/**\n * Checks that an input String can be \n * parsed as a fraction\n * \n * @param {String} val \n * @param {Number} maxLength \n */\nconst checkFraction = (val, maxLength = maxValLength) => {\n    // Empty values are parsed as 0\n    if (!val) {\n        return val;\n    }\n\n    if (val.length > maxLength) {\n        return false;\n    }\n\n    // Returns false on invalid input \n    if (!RE.test(val)) {\n        return false;\n    } else {\n        // Check for 0 denominator\n        const splitFraction = val.split('/');\n        if (splitFraction.length > 1 && splitFraction[1] === '0') {\n            return false;\n        }\n\n        return val;\n    }\n}\n\nexport { checkFraction };","import React from 'react';\nimport { checkFraction } from '../utils/StringToFractionUtil';\n\n/**\n * A cell in the matrix. Is used to input and display values\n */\nconst GREY = '#cecece';\nconst WHITE = 'white';\nfunction Cell({ cols, index, opacity, matrix, setMatrix }) {\n\n    // Cells in the last row are grey\n    const getColour = (i) => {\n        // The index of the item mod |columns| is |columns|-1 \n        const cellColour = (i % cols) === cols - 1 ? GREY : WHITE;\n\n        return cellColour;\n    }\n\n    const style = {\n        opacity: opacity,\n        transitionProperty: \"opacity\",\n        transitionDuration: \"0.2s\",\n        backgroundColor: getColour(index)\n    };\n\n    // Update the matrix state\n    const updateState = (val) => {\n        if (!checkFraction(val) && val !== '') {\n            return;\n        }\n\n        let matrixCopy = matrix.slice(0);\n\n        matrixCopy[index] = val;\n        setMatrix(matrixCopy);\n    }\n\n    return (\n        <div className='cell' >\n            <input type='text' className='numInput'\n                value={matrix[index].toString()}\n                style={style}\n                onChange={(e) => updateState(e.target.value)}\n                data-testid={index} />\n        </div>\n    );\n}\n\nexport default Cell;","import React from 'react';\nimport Cell from './Cell';\n\n/**\n * The matrix of cells \n */\nfunction Matrix({ cols, dimmedCells, matrix, setMatrix }) {\n    const gridStyle = { gridTemplateColumns: `repeat(${cols}, minmax(auto, 1fr))` };\n\n    // Render each cell of the matrix using dimensions \n    // passed in props\n    const renderCells = (arr) => {\n        return (\n            arr.map( (el, index)=> {\n\n                let opacity = dimmedCells.includes(index)? 0: 1;\n\n                return <Cell index={index} key={index} matrix={matrix} \n                        setMatrix={setMatrix} cols={cols}\n                        opacity={opacity} />\n            })\n        );\n    };\n\n    return (\n        <div className=\"matrix\" style={gridStyle}>\n            {renderCells(matrix)}\n        </div>\n    );\n}\n\nexport default Matrix;","import React from 'react';\n\nfunction SwapButton({ clicked, f, i, name }) {\n    let style = {};\n    if (clicked) {\n        style = { backgroundColor: '#3CBC8D' };\n    }\n\n    return (\n        <button className=\"swapButton\" onClick={(e) => { f(i); }}\n            style={style}>\n            {name}\n        </button>\n    );\n}\n\nexport default SwapButton;","// swap two rows in the matrix\nconst doSwap = (i, swapPair, setSwapPair, arrayToMatrix, setMatrix, dimRows) => {\n    let pair = swapPair;\n    pair.push(i);\n    setSwapPair(pair.slice(0));\n\n    // if two rows have been selected to swap\n    if (swapPair.length === 2) {\n        // indexes of rows being swapped\n        let first = swapPair[0];\n        let second = swapPair[1];\n\n        dimRows([first, second]);\n\n        let arr = arrayToMatrix();\n\n        // the row being overwritten\n        let temp = arr[first];\n        arr[first] = arr[second];\n        arr[second] = temp;\n\n        let flattened = arr.flatMap(el => el);\n        setMatrix(flattened);\n        setSwapPair([]);\n    }\n};\n\nexport default doSwap;","import React from 'react';\nimport Matrix from './Matrix';\nimport SwapButton from '../controls/SwapButton';\nimport doSwap from '../rowoperations/SwapOperation';\n\n/**\n * Renders the matrix and side buttons\n */\nfunction MatrixContainer({ dimensions, swapPair, setSwapPair, matrix, setMatrix,\n    arrayToMatrix, dimmedCells, dimRows }) {\n    const cols = dimensions.n;\n\n    // call the swap row operation to swap two selected\n    // rows\n    const callDoSwap = (i) => {\n        doSwap(i, swapPair, setSwapPair,\n            arrayToMatrix, setMatrix, dimRows);\n    }\n\n    const renderSwapButtons = () => {\n        // there should be as many buttons as rows\n        const arr = new Array(dimensions.m).fill(0);\n\n        return arr.map((el, index) => {\n\n            let clicked = false;\n            // if this button has been clicked\n            if (index === swapPair[0] || index === swapPair[1]) {\n                clicked = true;\n            }\n\n            return <SwapButton i={index} key={index} name={`⟺ Row ${index + 1}`}\n                f={callDoSwap} clicked={clicked} />\n        })\n    }\n\n    return (\n        <div className='matrixContainer'>\n            <div className='swapButtons'>\n                {renderSwapButtons()}\n            </div>\n            <Matrix cols={cols}\n                matrix={matrix}\n                setMatrix={setMatrix}\n                dimmedCells={dimmedCells} />\n        </div>\n    );\n}\n\nexport default MatrixContainer;","import React from 'react';\n\nfunction TopRowItem({ heading }) {\n    return (\n        <div className='topRowItem'>{heading}</div>\n    );\n}\n\nexport default TopRowItem;","import React from 'react';\nimport TopRowItem from './TopRowItem';\n\nfunction TopRow({ cols }) {\n    const rowHeads = ['x₁', 'x₂', 'x₃', 'x₄', 'x₅', 'x₆', 'x₇', 'x₈', 'x₉', 'd'];\n\n    const makeColHeaders = () => {\n        const emptyArray = new Array(cols).fill(0);\n        let i = 0;\n        let headingsEnd = rowHeads.length - 1;\n\n        return (\n            emptyArray.map(el => {\n                // if this is the final column heading it is a constant and should use 'd'\n                let heading = i === cols - 1 ? rowHeads[headingsEnd] : rowHeads[i];\n                i++;\n\n                return (\n                    <TopRowItem heading={heading} key={i} />\n                );\n            }\n            )\n        );\n    };\n\n    return (\n        <div className='topRow'>{makeColHeaders()}</div>\n    );\n}\n\nexport default TopRow;","import React, { useState, useContext } from 'react';\nimport TopContainer from './TopContainer';\nimport BottomContainer from './BottomContainer';\nimport { HistoryContext } from './providers/HistoryProvider';\nimport MatrixContainer from './matrixcontainer/MatrixContainer';\nimport TopRow from './toprow/TopRow';\nimport sleep from './utils/Sleep';\n\nimport './style.css';\n\nfunction App() {\n  const startDimensions = { m: 4, n: 5 };\n  const zeroMatrix = new Array(startDimensions.m * startDimensions.n).fill('0');\n\n  // Create an array with random values as start state\n  const makeRandomArray = () => {\n    const min = -10;\n    const max = 10;\n\n    const size = startDimensions.m * startDimensions.n;\n    const arr = new Array(size).fill('0');\n\n    // Map each 0 element to a random member in range min to max\n    return arr.map(el => {\n      const randomVal = Math.floor(Math.random() * (max - min + 1) + min);\n      return randomVal.toString();\n    });\n  };\n\n  const historyContext = useContext(HistoryContext); // Stores history of past states\n\n  const [dimensions, setDimensions] = useState(startDimensions); // Dimension of array (mXn)\n  const [m, setM] = useState('');\n  const [n, setN] = useState('');\n  const [matrix, setMatrix] = useState(makeRandomArray()); // The matrix represented as a 1D array\n  const [swapPair, setSwapPair] = useState([]); // Two rows to be swapped\n  const [dimmedCells, setDimmedCells] = useState([]); // Cells dimmed during transition animations\n\n  // Create an array of the required dimensions\n  const makeArray = () => {\n    resetMatrix();\n    if (m === '' || n === '') {\n      return;\n    }\n\n    const size = m * n;\n    setDimensions({ m, n });\n\n    const matrix = new Array(size).fill('0');\n    historyContext.resetHistory({ matrix: zeroMatrix, dimensions: startDimensions });\n    updateMatrixState(matrix);\n  };\n\n  // Reset matrix to original dimensions and values\n  const resetMatrix = () => {\n    setN('');\n    setM('');\n    setDimensions(startDimensions);\n    setMatrix(zeroMatrix);\n    setSwapPair([]);\n    historyContext.resetHistory({ matrix: zeroMatrix, dimensions: startDimensions });\n  };\n\n  // Gets previous state from history\n  // and updates current state to reflect it\n  const undoLast = () => {\n    const last = historyContext.undo();\n\n    // History is empty\n    if (!last) {\n      resetMatrix();\n    } else {\n      setMatrix(last.matrix);\n      setDimensions(last.dimensions);\n    }\n  };\n\n  // Update matrix state and add old matrix to memory\n  const updateMatrixState = (newMatrix) => {\n    historyContext.addState({ matrix, dimensions });\n    setMatrix(newMatrix)\n  };\n\n  // Converts the matrix, which is currently in 1D array form, to\n  // 2D array\n  const arrayToMatrix = () => {\n    const out = [];\n    const cols = dimensions.n;\n    // iterate in chunks of the column size\n    for (let i = 0; i < matrix.length; i = i + cols) {\n      out.push(matrix.slice(i, i + cols));\n    }\n    return out;\n  };\n\n  // Triggers transition animation to signify row operation. Takes an array of \n  // row indices as its sole argument\n  const dimRows = async (rows) => {\n    const cols = dimensions.n;\n    const out = [];\n\n    rows.forEach(row => {\n      let startIndex = row * cols;\n      out.push(startIndex);\n\n      // add index of the cells in this row\n      for (let i = startIndex + 1; i < startIndex + cols; i++) {\n        out.push(i);\n      }\n    });\n\n    // add these to array of dimmed cells\n    setDimmedCells(out);\n    await sleep(250);\n    setDimmedCells([]);\n  };\n\n  return (\n    <div className='mainContainer'>\n      <TopContainer setM={setM} setN={setN}\n        m={m} n={n}\n        makeArray={makeArray}\n        resetMatrix={resetMatrix} />\n      <TopRow cols={dimensions.n} />\n      <MatrixContainer dimensions={dimensions}\n        swapPair={swapPair}\n        setSwapPair={setSwapPair}\n        arrayToMatrix={arrayToMatrix}\n        matrix={matrix}\n        setMatrix={updateMatrixState}\n        dimmedCells={dimmedCells}\n        dimRows={dimRows} />\n      <BottomContainer rows={dimensions.m}\n        getMatrix={arrayToMatrix}\n        setMatrix={updateMatrixState}\n        undoLast={undoLast}\n        setDimmedCells={setDimmedCells}\n        dimRows={dimRows} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport { HistoryProvider } from './components/providers/HistoryProvider';\n \nReactDOM.render(\n    <HistoryProvider>\n        <App />\n    </HistoryProvider>,\n    document.getElementById('root'));"],"sourceRoot":""}